using Bonsai.Resources;
using OpenTK;
using System;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;

namespace Bonsai.Shaders
{
    /// <summary>
    /// Provides the abstract base class for operators that load resources into
    /// the shader window resource manager.
    /// </summary>
    public abstract class ResourceLoader : Bonsai.Resources.ResourceLoader
    {
        /// <summary>
        /// Bundles a set of resources to be loaded into the shader window
        /// resource manager.
        /// </summary>
        /// <param name="source">
        /// A sequence of <see cref="INativeWindow"/> objects into which the resources
        /// will be loaded.
        /// </param>
        /// <returns>
        /// A sequence of <see cref="ResourceConfigurationCollection"/> objects which
        /// can be used to load resources into the resource manager.
        /// </returns>
        public IObservable<ResourceConfigurationCollection> Process(IObservable<INativeWindow> source)
        {
            return source.Select(input => new ResourceConfigurationCollection(((ShaderWindow)input).ResourceManager, GetResources()));
        }

        /// <summary>
        /// Bundles a set of resources to be loaded into the shader window resource
        /// manager when an observable sequence of window events emits a notification.
        /// </summary>
        /// <typeparam name="TEventArgs">
        /// The type of the event data generated by the window event.
        /// </typeparam>
        /// <param name="source">
        /// A sequence of event data generated from a shader window.
        /// </param>
        /// <returns>
        /// A sequence of <see cref="ResourceConfigurationCollection"/> objects which
        /// can be used to load resources into the resource manager.
        /// </returns>
        public IObservable<ResourceConfigurationCollection> Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>> source)
        {
            return source.Select(input => new ResourceConfigurationCollection(((ShaderWindow)input.Sender).ResourceManager, GetResources()));
        }
    }
}
