using OpenTK;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Reactive;
using System.Reactive.Linq;

namespace Bonsai.Shaders
{
    /// <summary>
    /// Represents an operator that calculates the ratio of window viewport
    /// width to its height for each viewport size in the sequence.
    /// </summary>
    [Description("Calculates the ratio of window viewport width to its height for each viewport size in the sequence.")]
    public class AspectRatio : Transform<Size, float>
    {
        static float GetAspectRatio(ShaderWindow window)
        {
            if (window == null)
            {
                throw new ArgumentNullException(nameof(window));
            }

            var viewport = window.Viewport;
            return GetAspectRatio(viewport.Width * window.Width, viewport.Height * window.Height);
        }

        static float GetAspectRatio(float width, float height)
        {
            return width / height;
        }

        /// <summary>
        /// Calculates the ratio of window viewport width to its height for each
        /// size in an observable sequence.
        /// </summary>
        /// <param name="source">
        /// A sequence of <see cref="Size"/> values representing the viewport width
        /// and height.
        /// </param>
        /// <returns>
        /// A sequence of floating-point values representing the aspect ratio for
        /// each size in the <paramref name="source"/> sequence.
        /// </returns>
        public override IObservable<float> Process(IObservable<Size> source)
        {
            return source.Select(input => GetAspectRatio(input.Width, input.Height));
        }

        /// <summary>
        /// Calculates the ratio of window viewport width to its height for each
        /// window in an observable sequence.
        /// </summary>
        /// <param name="source">
        /// A sequence of <see cref="INativeWindow"/> objects.
        /// </param>
        /// <returns>
        /// A sequence of floating-point values representing the aspect ratio for
        /// each active viewport in the <paramref name="source"/> sequence.
        /// </returns>
        public IObservable<float> Process(IObservable<INativeWindow> source)
        {
            return source.Select(input => GetAspectRatio((ShaderWindow)input));
        }

        /// <summary>
        /// Calculates the ratio of window viewport width to its height for each
        /// window event in an observable sequence.
        /// </summary>
        /// <typeparam name="TEventArgs">
        /// The type of the event data generated by the window event.
        /// </typeparam>
        /// <param name="source">
        /// A sequence of event data generated from a shader window.
        /// </param>
        /// <returns>
        /// A sequence of floating-point values representing the aspect ratio for
        /// the current viewport in each window in the sequence of event data.
        /// </returns>
        public IObservable<float> Process<TEventArgs>(IObservable<EventPattern<INativeWindow, TEventArgs>> source)
        {
            return source.Select(input => GetAspectRatio((ShaderWindow)input.Sender));
        }

        /// <summary>
        /// Calculates the ratio of window viewport width to its height for each
        /// size pair in an observable sequence.
        /// </summary>
        /// <param name="source">
        /// A sequence of floating-point value pairs representing the viewport width
        /// and height.
        /// </param>
        /// <returns>
        /// A sequence of floating-point values representing the aspect ratio for
        /// each size pair in the <paramref name="source"/> sequence.
        /// </returns>
        public IObservable<float> Process(IObservable<Tuple<float, float>> source)
        {
            return source.Select(input => GetAspectRatio(input.Item1, input.Item2));
        }

        /// <summary>
        /// Calculates the ratio of the shader window viewport width to its height,
        /// at the time the <paramref name="source"/> sequence emits a notification.
        /// </summary>
        /// <typeparam name="TSource">
        /// The type of the elements in the <paramref name="source"/> sequence.
        /// </typeparam>
        /// <param name="source">
        /// The sequence containing the notifications indicating when to calculate
        /// the current aspect ratio of the shader window.
        /// </param>
        /// <returns>
        /// A sequence of floating-point values representing the current aspect
        /// ratio of the shader window, at the time when the <paramref name="source"/>
        /// sequence emits a notification.
        /// </returns>
        public IObservable<float> Process<TSource>(IObservable<TSource> source)
        {
            return source.CombineEither(
                ShaderManager.WindowSource,
                (input, window) => GetAspectRatio(window));
        }
    }
}
